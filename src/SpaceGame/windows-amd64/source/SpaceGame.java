/* autogenerated by Processing revision 1286 on 2025-10-22 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SpaceGame extends PApplet {

// Cormac Stone || Nov 30 2023 || SpaceGame

SoundFile laser;
SpaceShip s1;
Star[] star;
ArrayList<Laser> lasers = new ArrayList<Laser>();
ArrayList<Rock> rocks = new ArrayList<Rock>();
ArrayList<PowUp> powups = new ArrayList<PowUp>();
ArrayList<Star> stars = new ArrayList<Star>();
int score, level; 
float lasersShot, lasersHit;
boolean play;
Timer rockTimer;
Timer powupTimer;
Timer starTimer;

 public void setup() {
  s1 = new SpaceShip(width/2, height/2);
  laser = new SoundFile(this, "laser2.wav");
  play = false;
  rockTimer = new Timer(500);
  rockTimer.start();
  powupTimer = new Timer(5000);
  powupTimer.start();
  starTimer = new Timer(50);
  starTimer.start();
  score = 0;
  level = 1;
  /* size commented out by preprocessor */;
  //fullScreen();
}

 public void draw() {
  background(22, 19, 35);
  if (play) {
    if (score==5000 && level!=2) {
      rockTimer = new Timer(300);
      level +=1;
    } else if (score==15000 && level!=3) {
      rockTimer = new Timer(200);
      level +=1;
    } else if (score==30000 && level!=4) {
      rockTimer = new Timer(100);
      level +=1;
    } else if (score==50000 && level!=5) {
      rockTimer = new Timer(0);
      level +=1;
    }
    //rocks
    if (rockTimer.isFinished()) {
      rocks.add(new Rock(PApplet.parseInt(random(width)), -100));
      rockTimer.start();
      println("lasers:" + lasers.size());
      println("rocks:" + rocks.size());
    }

    //rocks render
    for (int i = 0; i < rocks.size(); i++) {
      Rock r = rocks.get(i);
      if (s1.intersect(r)) {
        s1.health-=r.diam/10;
        rocks.remove(r);
      }
      if (r.reachedBottom()) {
        rocks.remove(r);
        score -=100;
      } else {
        r.display();
        r.move();
      }
    }

    //lasers render
    for (int i = 0; i < lasers.size(); i++) {
      if (s1.ammo>0) {
        Laser l = lasers.get(i);
        for (int j = 0; j<rocks.size(); j++) {
          Rock r = rocks.get(j);
          if (l.intersect(r)) {
            rocks.remove(r);
            lasers.remove(l);
            score+=100;
            lasersHit +=1;
          }
        }
        if (l.reachedTop())
        {
          lasers.remove(l);
        } else {
          l.display();
          l.move();
        }
      }
    } //powerup render && make
    if (powupTimer.isFinished()) {
      powups.add(new PowUp(PApplet.parseInt(random(width)), -100));
      powupTimer.start();
      println("lasers:" + lasers.size());
      println("rocks:" + rocks.size());
    }
    for (int i = 0; i < powups.size(); i++) {
      PowUp p = powups.get(i);
      if (s1.intersect(p)) {
        if (p.type=='a') {
          s1.ammo+=p.val;
        } else if (p.type=='h') {
          s1.health+=p.val;
        } else if (p.type=='t') {
          if (s1.turretCount<5) {
            s1.turretCount+=p.val;
          } else {
            s1.ammo+=100;
          }
        }
        powups.remove(p);
      }
      if (p.reachedBottom()) {
        powups.remove(p);
      } else {
        p.display();
        p.move();
      }
    }
    if (starTimer.isFinished()) {
      stars.add(new Star(PApplet.parseInt(random(width)), -10));
      starTimer.start();
    }
    for (int i = 0; i < stars.size(); i++) {
      Star s = stars.get(i);
      if (s.reachedBottom()) {
        stars.remove(s);
      } else {
        s.display();
        s.move();
      }
    }

    //ship render
    s1.display(s1.x, s1.y);
    s1.move(mouseX, mouseY);
    infoPanel();
    if (s1.ammo<=0) {
      fill(255, 150);
      textSize(100);
      text("NO AMMO", width/2, height/2);
    }
    if (s1.health<1) {
      gameOver();
      noLoop();
    }
  } else {
    startScreen();
  }
}


 public void infoPanel() {
  if (s1.health > 0) {
    fill(127, 127);
    rectMode(CENTER);
    noStroke();
    rect(60, height-50, 130, 110);
    fill(255);
    textAlign(CENTER);
    textSize(20);
    text("score:" + score, 63, height-70);
    text("level:" + level, 63, height-50);
    text("health:" + s1.health, 63, height-30);
    text("ammo:" + s1.ammo, 63, height-10);
    if (lasersShot > 0) {
      float  accuracy = lasersHit*10  / lasersShot*10;
      text("Accuracy: " + accuracy  + "%", 63, height-90);
    }
  }
}

 public void gameOver() {
  if (s1.health<=0) {
    background(0);
    fill(255);
    textSize(100);
    text("GAME OVER", width/2, height/2);
    text("Score:" + score, width/2, (height/2)+100);
    text("Level:" + level, width/2, (height/2)+200);
    noLoop();
  }
}

 public void startScreen() {
  background(0);
  fill(255);
  textAlign(CENTER);
  textSize(100);
  text("SPACE GAME", width/2, 200);
  textSize(50);
  text("by Cormac Stone", width/2, 275);
  text("click to begin", width/2, 350);
  if (mousePressed) {
    play = true;
  }
}

 public void mousePressed() {
  noCursor();
  if (s1.ammo!=0) {
    if (s1.turretCount == 1) {
      lasers.add(new Laser(s1.x, s1.y));
      laser.play();
      s1.ammo -= 1;
      lasersShot += 1;
    } else  if (s1.turretCount == 2) {
      lasers.add(new Laser(s1.x-15, s1.y));
      lasers.add(new Laser(s1.x+15, s1.y));
      laser.play();
      s1.ammo -= 2;
      lasersShot +=2;
    } else  if (s1.turretCount == 3) {
      lasers.add(new Laser(s1.x, s1.y));
      lasers.add(new Laser(s1.x+30, s1.y));
      lasers.add(new Laser(s1.x-30, s1.y));
      laser.play();
      s1.ammo -= 3;
      lasersShot +=1;
    } else  if (s1.turretCount == 4) {
      lasers.add(new Laser(s1.x-15, s1.y));
      lasers.add(new Laser(s1.x+15, s1.y));
      lasers.add(new Laser(s1.x-45, s1.y));
      lasers.add(new Laser(s1.x+45, s1.y));
      laser.play();
      s1.ammo -= 4;
      lasersShot +=1;
    } else  if (s1.turretCount == 5) {
      lasers.add(new Laser(s1.x, s1.y));
      lasers.add(new Laser(s1.x+30, s1.y));
      lasers.add(new Laser(s1.x-30, s1.y));
      lasers.add(new Laser(s1.x+60, s1.y));
      lasers.add(new Laser(s1.x-60, s1.y));
      laser.play();
      s1.ammo -= 5;
      lasersShot +=1;
    }
  } else {
    fill(255, 150);
    textSize(100);
    text("NO AMMO", width/2, height/2);
  }
}
 public void keyPressed() {
  if (key==' ') {
    if (s1.ammo!=0&&s1.ammo>0) {
      if (s1.turretCount == 1) {
        lasers.add(new Laser(s1.x, s1.y));
        laser.play();
        s1.ammo -= 1;
      } else  if (s1.turretCount == 2) {
        lasers.add(new Laser(s1.x-15, s1.y));
        lasers.add(new Laser(s1.x+15, s1.y));
        laser.play();
        s1.ammo -= 2;
      } else  if (s1.turretCount == 3) {
        lasers.add(new Laser(s1.x, s1.y));
        lasers.add(new Laser(s1.x+30, s1.y));
        lasers.add(new Laser(s1.x-30, s1.y));
        laser.play();
        s1.ammo -= 3;
      } else  if (s1.turretCount == 4) {
        lasers.add(new Laser(s1.x-15, s1.y));
        lasers.add(new Laser(s1.x+15, s1.y));
        lasers.add(new Laser(s1.x-45, s1.y));
        lasers.add(new Laser(s1.x+45, s1.y));
        laser.play();
        s1.ammo -= 4;
      } else  if (s1.turretCount == 5) {
        lasers.add(new Laser(s1.x, s1.y));
        lasers.add(new Laser(s1.x+30, s1.y));
        lasers.add(new Laser(s1.x-30, s1.y));
        lasers.add(new Laser(s1.x+60, s1.y));
        lasers.add(new Laser(s1.x-60, s1.y));
        laser.play();
        s1.ammo -= 5;
      }
    }
  }
  if (keyCode ==116) {
    s1.ammo=1000;
    lasers.add(new Laser(s1.x, s1.y));
    lasers.add(new Laser(s1.x+30, s1.y));
    lasers.add(new Laser(s1.x-30, s1.y));
    lasers.add(new Laser(s1.x+60, s1.y));
    lasers.add(new Laser(s1.x-60, s1.y));
    lasers.add(new Laser(s1.x+90, s1.y));
    lasers.add(new Laser(s1.x-90, s1.y));
    lasers.add(new Laser(s1.x+120, s1.y));
    lasers.add(new Laser(s1.x-120, s1.y));
    lasers.add(new Laser(s1.x+150, s1.y));
    lasers.add(new Laser(s1.x-150, s1.y));
    lasers.add(new Laser(s1.x+180, s1.y));
    lasers.add(new Laser(s1.x-180, s1.y));
    lasers.add(new Laser(s1.x+210, s1.y));
    lasers.add(new Laser(s1.x-210, s1.y));
    laser.play();
  }
}

class Laser {
  int x, y, w, h, speed;
  PImage laser;
  Laser(int x, int y) {
    this.x=x;
    this.y=y;
    w=60;
    h= 10;
    speed = 12;
    laser = loadImage("laser.png");
    
  }
   public void display() {
    imageMode(CENTER);
    laser.resize(w, w);
    image(laser, x+1, y);
  }

   public void move() {
    y-=speed;
  }

   public boolean reachedTop() {
    if (y<-100) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect(Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<=r.diam/2) {
      return true;
    } else {
      return false;
    }
  }
}
class PowUp {
  int x, y, diam, speed, val;
  PImage powup;
  char type;

  PowUp(int x, int y) {
    this.x=x;
    this.y=y;
    diam = 70;
    speed = 2;
    int rand = PApplet.parseInt(random(7));
    if (rand==0||rand==4||rand==5||rand==6) {
      powup = loadImage("ammo.png");
      val = 100;
      type = 'a';
    } else if (rand==1) {
      powup = loadImage("health.png");
      val = 10;
      type = 'h';
    } else if (rand==2||rand==3) {
      powup = loadImage("turret.png");
      val = 1;
      type = 't';
    }
  }
   public void display() {
    imageMode(CENTER);
    powup.resize(diam, diam);
    image(powup, x, y);
  }
   public void move() {
    y+=speed;
  }
   public boolean reachedBottom() {
    if (y>height+100) {
      return true;
    } else {
      return false;
    }
  }
}
class Rock {
  int x, y, diam, speed;
  PImage rock;

  Rock(int x, int y) {
    this.x=x;
    this.y=y;
    diam = PApplet.parseInt(random(60,90));
    speed = PApplet.parseInt(random(1, 6));
    rock = loadImage("rok.png");
  }
   public void display() {
    imageMode(CENTER);
    rock.resize(diam, diam);
    image(rock, x, y);
  }
   public void move() {
    y+=speed;
  }
   public boolean reachedBottom() {
    if (y>height+100) {
      return true;
    } else {
      return false;
    }
  }
}
class SpaceShip {
  int x, y, w, health, ammo, turretCount;
  PImage ship;

  SpaceShip(int x, int y) {
    this.x=x;
    this.y=y;
    w=80;
    health = 100;
    ammo = 1000;
    turretCount = 1;
    ship = loadImage("ship.png");
  }
   public void display(int x, int y) {
    if (health>0) {
      imageMode(CENTER);
      ship.resize(w, w);
      image(ship, x, y);
    }
  }
   public void move(int x, int y) {
    this.x=x;
    this.y=y;
  }

   public boolean fire() {
    if (ammo > 0) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect(Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<=r.diam/1.5f) {
      return true;
    } else {
      return false;
    }
  }  public boolean intersect(PowUp p) {
    float d = dist(x, y, p.x, p.y);
    if (d<=p.diam/1.5f) {
      return true;
    } else {
      return false;
    }
  }
}
class Star {
  int x, y, diam, speed;
  PImage star;

  Star(int x, int y) {
    this.x=x;
    this.y=y;
    diam = PApplet.parseInt(random(10, 20));
    speed = PApplet.parseInt(random(1, 4));
    star = loadImage("str.png");
  }
   public void display() {
    imageMode(CENTER);
    star.resize(diam, diam);
    image(star, x, y);
  }

   public void move() {
    y+=speed;
  }
   public boolean reachedBottom() {
    if (y>height+10) {
      return true;
    } else {
      return false;
    }
  }
}
// Daniel Shiffman
class Timer {

  int savedTime; // When Timer started
  int totalTime; // How long Timer should last

  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
   public void start() {
    // When the timer starts it stores the current time in milliseconds.
    savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed. 
  // The work of the timer is farmed out to this method.
   public boolean isFinished() { 
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) {
      return true;
    } else {
      return false;
    }
  }
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SpaceGame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
